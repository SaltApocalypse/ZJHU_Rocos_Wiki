import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as u,c as d,a as r,d as l,w as s,b as n,e as c,f as e}from"./app-NMBIbr4e.js";const k={},m=c('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>面向维护人员：本页仍存在不完善之处，已用<code>TODO</code>标记。</p><ul><li>几处的 cpp 没加进去 - SaltA 240426</li></ul></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>该页面仍在建设中，可能会有不完善的地方。 - 240426</p></div><h2 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h2><ul><li><p>本篇主要介绍在<code>Rocos/share/geomotry.h</code>中定义的类(class)。</p></li><li><p>内容部分提供了部分类型的<strong>私有成员</strong>仅用于方便理解用。</p></li><li><p>构造 部分的 lua 部分传入参数的类型可以参考 cpp 部分。</p></li></ul><h2 id="常用数据类型" tabindex="-1"><a class="header-anchor" href="#常用数据类型"><span>常用数据类型</span></a></h2><h3 id="cvector" tabindex="-1"><a class="header-anchor" href="#cvector"><span>CVector</span></a></h3><ul><li><p>二维向量，常用于表示速度等。</p></li><li><p>内容</p><ul><li><code>double _x</code> 向量的 x 值。</li><li><code>double _y</code> 向量的 y 值。</li></ul></li><li><p>构造</p></li></ul>',7),v=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 传入坐标 x,y 值"),e(`
`),n("span",{class:"token keyword"},"local"),e(" vel "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),e("x"),n("span",{class:"token punctuation"},","),e(" y"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 等效于 CVector(0, 0)"),e(`
`),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token comment"},"// 传入坐标 x,y 值"),e(`
`),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"double"),e(" x"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"double"),e(" y"),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token comment"},"// 传入另一个向量"),e(`
`),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" CVector "),n("span",{class:"token operator"},"&"),e("v"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=c("<ul><li>常用方法 <ul><li><code>double mod()</code> 返回向量的模。</li><li><code>double mod2()</code> 返回向量的模的平方。</li><li><code>double dir()</code> 返回向量的角度。</li><li><code>double theta(const CVector &amp;v)</code> 返回自身到给定向量的夹角。</li><li><code>double x()</code> 获取 x 值，还有返回 y 值的<code>y()</code>。</li><li><code>CVector operator+(const CVector &amp;v)</code> 返回当前向量加上传入向量。</li><li><code>CVector operator-(const CVector &amp;v)</code> 返回当前向量减去传入向量。</li><li><code>CVector operator*(double a)</code> 返回当前向量的<code>x, y</code>乘上<code>a</code>。</li><li><code>double operator*(CVector b)</code> 返回当前向量的向量点乘。</li><li><code>CVector operator/(double a)</code> 返回当前向量的<code>x, y</code>除以<code>a</code>。</li><li><code>CVector operator-()</code> 返回当前向量的负。</li></ul></li></ul>",1),h=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 使用方法"),e(`
`),n("span",{class:"token keyword"},"local"),e(" vel "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),e("x1"),n("span",{class:"token punctuation"},","),e(" y1"),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- mod()"),e(`
`),n("span",{class:"token keyword"},"local"),e(" velMod "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"mod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- dir()"),e(`
`),n("span",{class:"token keyword"},"local"),e(" veldir "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"dir"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- x,y"),e(`
`),n("span",{class:"token keyword"},"local"),e(" vel1X "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"x"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token keyword"},"local"),e(" vel1Y "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"y"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 使用方法"),e(`
CVector vel `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),e("x"),n("span",{class:"token punctuation"},","),e(" y"),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"// mod()"),e(`
`),n("span",{class:"token keyword"},"double"),e(" velMod "),n("span",{class:"token operator"},"="),e(" vel1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"mod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"// dir()"),e(`
`),n("span",{class:"token keyword"},"double"),e(" veldir "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"dir"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"// x,y"),e(`
`),n("span",{class:"token keyword"},"double"),e(" velX "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"x"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token keyword"},"double"),e(" velY "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"y"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=c('<h3 id="cgeopoint" tabindex="-1"><a class="header-anchor" href="#cgeopoint"><span>CGeoPoint</span></a></h3><ul><li><p>坐标点。</p></li><li><p>内容</p><ul><li><code>double _x</code> 坐标的 x 值。</li><li><code>double _y</code> 坐标的 y 值。</li></ul></li><li><p>构造</p></li></ul>',2),C=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 传入坐标 x,y 值"),e(`
`),n("span",{class:"token keyword"},"local"),e(" point "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),e("x"),n("span",{class:"token punctuation"},","),e(" y"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 构造出 (0, 0)"),e(`
`),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token comment"},"// 传入坐标 x,y 值"),e(`
`),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"double"),e(" x"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"double"),e(" y"),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token comment"},"// 传入另一个坐标点"),e(`
`),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" CGeoPoint "),n("span",{class:"token operator"},"&"),e("p"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=c("<ul><li>常用方法 <ul><li><code>double x()</code> 获取 x 值，还有返回 y 值的<code>y()</code>。</li><li><code>double dist(const CGeoPoint &amp;p)</code> 返回传入坐标与当前坐标的距离。</li><li><code>double dist2(const CGeoPoint &amp;p)</code> 返回传入坐标与当前坐标的距离的平方。</li><li><code>CGeoPoint midPoint(const CGeoPoint &amp;p)</code> 返回传入坐标与当前坐标的中点坐标。</li><li><code>bool operator==(const CGeoPoint &amp;rhs)</code> 返回当前坐标与传入坐标是否相同。</li><li><code>CGeoPoint operator+(const CVector &amp;v)</code> 返回传入坐标与当前坐标的和。</li><li><code>CVector operator-(const CVector &amp;v)</code> 返回传入坐标与当前坐标的差。</li><li><code>CGeoPoint operator*(const double &amp;a)</code> 返回当前坐标的<code>x, y</code>乘上<code>a</code>。</li></ul></li></ul>",1),G=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 使用方法"),e(`
`),n("span",{class:"token keyword"},"local"),e(" point1 "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),e("x1"),n("span",{class:"token punctuation"},","),e(" y1"),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token keyword"},"local"),e(" point2 "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),e("x2"),n("span",{class:"token punctuation"},","),e(" y2"),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- 我们仔细观察可以发现两个 CGeoPoint 相减之后的类型是 CVector "),e(`
`),n("span",{class:"token comment"},"-- 所以我们相减过后可以调用 CVector 的方法 "),e(`
`),n("span",{class:"token comment"},"-- 例如 mod()"),e(`
`),n("span",{class:"token keyword"},"local"),e(" mod "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("point1 "),n("span",{class:"token operator"},"-"),e(" point2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"mod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- dist()"),e(`
`),n("span",{class:"token keyword"},"local"),e(" dist "),n("span",{class:"token operator"},"="),e(" point1"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"dist"),n("span",{class:"token punctuation"},"("),e("point2"),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token comment"},"-- 其实 mod == dist"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 使用方法"),e(`
CGeoPoint point1 `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),e("x1"),n("span",{class:"token punctuation"},","),e(" y1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
CGeoPoint point2 `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoPoint"),n("span",{class:"token punctuation"},"("),e("x2"),n("span",{class:"token punctuation"},","),e(" y2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`

`),n("span",{class:"token comment"},"// 我们仔细观察可以发现两个 CGeoPoint 相减之后的类型是 CVector "),e(`
`),n("span",{class:"token comment"},"// 所以我们相减过后可以调用 CVector 的方法 "),e(`
`),n("span",{class:"token comment"},"// 例如 mod()"),e(`
`),n("span",{class:"token keyword"},"double"),e(" mod "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("point1 "),n("span",{class:"token operator"},"-"),e(" point2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"mod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`

`),n("span",{class:"token comment"},"// dist()"),e(`
`),n("span",{class:"token keyword"},"double"),e(" dist "),n("span",{class:"token operator"},"="),e(" point1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"dist"),n("span",{class:"token punctuation"},"("),e("point2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token comment"},"// 其实 mod == dist"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),w=c('<h3 id="cgeoline" tabindex="-1"><a class="header-anchor" href="#cgeoline"><span>CGeoLine</span></a></h3><ul><li><p>直线（区别于<a href="#cgeosegment">线段</a>）。</p></li><li><p>内容</p><ul><li><code>CGeoPoint _p1</code> 直线的第一个坐标点。</li><li><code>CGeoPoint _p2</code> 直线的第二个坐标点。</li></ul><!-- - `double _a` 直线的解析方程 $a*x + b * y + c = 0$ 为统一表示，约定 $a &gt;= 0$\n  - `double _b`\n  - `double _c` --></li><li><p>构造</p></li></ul>',2),A=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 传入直线的起点和直线的方向"),e(`
`),n("span",{class:"token keyword"},"local"),e(" line1 "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoLine"),n("span",{class:"token punctuation"},"("),e("point1"),n("span",{class:"token punctuation"},","),e(" point2"),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token keyword"},"local"),e(" line2 "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoLine"),n("span",{class:"token punctuation"},"("),e("point"),n("span",{class:"token punctuation"},","),e(" dir"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token function"},"CGeoLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token comment"},"// 传入直线的两个坐标"),e(`
`),n("span",{class:"token function"},"CGeoLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" CGeoPoint "),n("span",{class:"token operator"},"&"),e("p1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"const"),e(" CGeoPoint "),n("span",{class:"token operator"},"&"),e("p2"),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token comment"},"// 传入直线的起点和直线的方向(射线)"),e(`
`),n("span",{class:"token function"},"CGeoLine"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" CGeoPoint "),n("span",{class:"token operator"},"&"),e("p"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"double"),e(" angle"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=c('<ul><li><p>常用方法</p><ul><li><code>CGeoPoint projection(const CGeoPoint &amp;p)</code> 返回投影点坐标。</li></ul><blockquote><p>关于投影点坐标</p><figure><img src="https://cdn.jsdelivr.net/gh/saltapocalypse/CDN/ZJHU_Rocos_Wiki/prjpoint.png" alt="关于投影点坐标" tabindex="0" loading="lazy"><figcaption>关于投影点坐标</figcaption></figure></blockquote><ul><li><code>CGeoPoint point1()</code> 返回点 1。</li><li><code>CGeoPoint point2()</code> 返回点 2。</li><li><code>bool operator==(const CGeoLine &amp;rhs)</code> 返回当前实现是否与传入直线相同。</li></ul></li></ul>',1),S=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 使用方法"),e(`
`),n("span",{class:"token keyword"},"local"),e(" line "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoLine"),n("span",{class:"token punctuation"},"("),e("point1"),n("span",{class:"token punctuation"},","),e(" point2"),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- projection()"),e(`
`),n("span",{class:"token keyword"},"local"),e(" projectionPos "),n("span",{class:"token operator"},"="),e(" line"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"projection"),n("span",{class:"token punctuation"},"("),e("point3"),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"-- point1,point2"),e(`
`),n("span",{class:"token keyword"},"local"),e(" point1 "),n("span",{class:"token operator"},"="),e(" line"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"point1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token keyword"},"local"),e(" point2 "),n("span",{class:"token operator"},"="),e(" line"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"point2"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 使用方法"),e(`
CVector vel `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CVector"),n("span",{class:"token punctuation"},"("),e("x"),n("span",{class:"token punctuation"},","),e(" y"),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"// mod()"),e(`
`),n("span",{class:"token keyword"},"double"),e(" velMod "),n("span",{class:"token operator"},"="),e(" vel1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"mod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"// dir()"),e(`
`),n("span",{class:"token keyword"},"double"),e(" veldir "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"dir"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`

`),n("span",{class:"token comment"},"// x,y"),e(`
`),n("span",{class:"token keyword"},"double"),e(" velX "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"x"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`),n("span",{class:"token keyword"},"double"),e(" velY "),n("span",{class:"token operator"},"="),e(" vel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"y"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=c('<h3 id="cgeolinelineintersection" tabindex="-1"><a class="header-anchor" href="#cgeolinelineintersection"><span>CGeoLineLineIntersection</span></a></h3><ul><li><p>直线与直线的交点。</p></li><li><p>内容</p><ul><li><code>bool _intersectant</code> 两条直线是否相交。</li><li><code>CGeoPoint _point</code> 两条直线的交点。</li></ul></li><li><p>构造</p></li></ul>',2),T=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code")]),n("div",{class:"line-numbers","aria-hidden":"true"})],-1),R=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// 传入两条直线(CeoLine)"),e(`
`),n("span",{class:"token function"},"CGeoLineLineIntersection"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" CGeoLine "),n("span",{class:"token operator"},"&"),e("line_1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"const"),e(" CGeoLine "),n("span",{class:"token operator"},"&"),e("line_2"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=c('<ul><li>常用方法 <ul><li><code>bool Intersectant()</code> 两条直线是否相交。</li><li><code>CGeoPoint IntersectPoint()</code> 两条直线的交点。</li></ul></li></ul><h3 id="cgeosegment" tabindex="-1"><a class="header-anchor" href="#cgeosegment"><span>CGeoSegment</span></a></h3><ul><li><p>线段（区别于<a href="#cgeoline">直线</a>），继承自直线。</p></li><li><p>内容</p><ul><li><code>CGeoPoint _start</code> 线段的起点。</li><li><code>CGeoPoint _end</code> 线段的终点。</li></ul></li><li><p>构造</p></li></ul>',3),I=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"-- 传入线段的起点和终点"),e(`
`),n("span",{class:"token keyword"},"local"),e(" segment "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"CGeoSegment"),n("span",{class:"token punctuation"},"("),e("point1"),n("span",{class:"token punctuation"},","),e(" point2"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token function"},"CGeoSegment"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token comment"},"// 传入线段的起点和终点"),e(`
`),n("span",{class:"token function"},"CGeoSegment"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" CGeoPoint "),n("span",{class:"token operator"},"&"),e("p1"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token keyword"},"const"),e(" CGeoPoint "),n("span",{class:"token operator"},"&"),e("p2"),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=c('<ul><li>常用方法 <ul><li><code>bool IsPointOnLineOnSegment(const CGeoPoint &amp;p)</code> 直线上的点是否在线段上。</li><li><code>CGeoPoint segmentsIntersectPoint(const CGeoSegment &amp;p)</code> 和传入线段的交点，如果没有交点会返回<code>CGeoPoint(9999, 9999)</code>。</li><li><code>double dist2Point(const CGeoPoint &amp;p)</code> 返回传入点到当前线段的距离。</li><li><code>double dist2Segment(const CGeoSegment &amp;s)</code> 返回传入线段到当前线段的距离，如果相交返回<code>0</code>.</li><li><code>CGeoPoint start()</code> 返回起点，还有返回终点的<code>end()</code>和返回中点的<code>center()</code>。</li></ul></li></ul><h2 id="常用数据类型的方法" tabindex="-1"><a class="header-anchor" href="#常用数据类型的方法"><span>常用数据类型的方法</span></a></h2>',2),H=n("p",null,[n("code",null,"mod()"),e(" 取两个坐标之间的模长。")],-1),D=n("p",null,"用法示例：",-1),M=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token keyword"},"local"),e(" distance "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("point1 "),n("span",{class:"token operator"},"-"),e(" point2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"mod"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code")]),n("div",{class:"line-numbers","aria-hidden":"true"})],-1),q=n("p",null,[n("code",null,"dir()"),e(" 取两个坐标的方向。")],-1),z=n("p",null,"用法示例：",-1),W=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua","data-title":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token keyword"},"local"),e(" direction "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token punctuation"},"("),e("point1 "),n("span",{class:"token operator"},"-"),e(" point2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),n("span",{class:"token function"},"dir"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),$=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[n("pre",{class:"language-cpp"},[n("code")]),n("div",{class:"line-numbers","aria-hidden":"true"})],-1),B=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结"},[n("span",null,"总结")])],-1),X=n("ul",null,[n("li",null,[e("在 lua 中我们想要使用几何相关的数据类型及其方法，可以去"),n("code",null,"Rocos/Core/src/LuaModule/geometry.pkg"),e("中查阅，并根据具体的定义去正确使用。")]),n("li",null,[e("c++ 则需要到相应的"),n("code",null,"Rocos/share/geometry.h"),e("和"),n("code",null,"Rocos/share/geometry.cpp"),e("文件中查阅。")])],-1);function Y(E,F){const o=p("CodeTabs");return u(),d("div",null,[r(" more "),m,l(o,{id:"75",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[v]),tab1:s(({value:a,isActive:t})=>[b]),_:1}),g,l(o,{id:"147",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[h]),tab1:s(({value:a,isActive:t})=>[_]),_:1}),y,l(o,{id:"187",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[C]),tab1:s(({value:a,isActive:t})=>[f]),_:1}),x,l(o,{id:"244",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[G]),tab1:s(({value:a,isActive:t})=>[P]),_:1}),w,l(o,{id:"285",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[A]),tab1:s(({value:a,isActive:t})=>[V]),_:1}),L,l(o,{id:"332",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[S]),tab1:s(({value:a,isActive:t})=>[j]),_:1}),N,l(o,{id:"372",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[T]),tab1:s(({value:a,isActive:t})=>[R]),_:1}),Z,l(o,{id:"431",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[I]),tab1:s(({value:a,isActive:t})=>[J]),_:1}),U,n("ul",null,[n("li",null,[H,D,l(o,{id:"485",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[M]),tab1:s(({value:a,isActive:t})=>[O]),_:1})]),n("li",null,[q,z,l(o,{id:"502",data:[{id:"lua"},{id:"cpp"}],"tab-id":"shell"},{title0:s(({value:a,isActive:t})=>[e("lua")]),title1:s(({value:a,isActive:t})=>[e("cpp")]),tab0:s(({value:a,isActive:t})=>[W]),tab1:s(({value:a,isActive:t})=>[$]),_:1})])]),B,X])}const nn=i(k,[["render",Y],["__file","datatype.html.vue"]]),en=JSON.parse('{"path":"/apidocs/datatype.html","title":"数据类型相关","lang":"zh-CN","frontmatter":{"title":"数据类型相关","description":"常用数据类型介绍。","head":[["meta",{"property":"og:url","content":"https://rocos.salta.top/apidocs/datatype.html"}],["meta",{"property":"og:site_name","content":"ZJHU Rocos Wiki"}],["meta",{"property":"og:title","content":"数据类型相关"}],["meta",{"property":"og:description","content":"常用数据类型介绍。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/saltapocalypse/CDN/ZJHU_Rocos_Wiki/prjpoint.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-26T05:56:39.000Z"}],["meta",{"property":"article:author","content":"ZJHU"}],["meta",{"property":"article:modified_time","content":"2024-04-26T05:56:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型相关\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/saltapocalypse/CDN/ZJHU_Rocos_Wiki/prjpoint.png\\"],\\"dateModified\\":\\"2024-04-26T05:56:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ZJHU\\",\\"url\\":\\"https://rocos.salta.top\\"}]}"]]},"headers":[{"level":2,"title":"提示","slug":"提示","link":"#提示","children":[]},{"level":2,"title":"常用数据类型","slug":"常用数据类型","link":"#常用数据类型","children":[{"level":3,"title":"CVector","slug":"cvector","link":"#cvector","children":[]},{"level":3,"title":"CGeoPoint","slug":"cgeopoint","link":"#cgeopoint","children":[]},{"level":3,"title":"CGeoLine","slug":"cgeoline","link":"#cgeoline","children":[]},{"level":3,"title":"CGeoLineLineIntersection","slug":"cgeolinelineintersection","link":"#cgeolinelineintersection","children":[]},{"level":3,"title":"CGeoSegment","slug":"cgeosegment","link":"#cgeosegment","children":[]}]},{"level":2,"title":"常用数据类型的方法","slug":"常用数据类型的方法","link":"#常用数据类型的方法","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1714031394000,"updatedTime":1714110999000,"contributors":[{"name":"SaltApocalypse","email":"super800800@icloud.com","commits":3},{"name":"Umbrella167","email":"1670187757@qq.com","commits":1}]},"readingTime":{"minutes":4.94,"words":1481},"filePathRelative":"apidocs/datatype.md","localizedDate":"2024年4月25日"}');export{nn as comp,en as data};
